name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  build_linux:
    name: Linux Build
    needs: [pre-commit]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        cuda: ["12.2.2"]
        nccl: ["2.25.1"]
        cuda_nccl: ["12.2"] # It must match cuda version patch.major
        mpi: ["4.1.2-2ubuntu1"]
        python_version: ["3.10", "3.11", "3.12"]
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2.0.2
        with:
          cmake-version: "3.22.x"

      - name: Use cmake
        run: cmake --version

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install MPI
        run: |
          sudo apt update
          sudo apt install -y openmpi-bin=${{ matrix.mpi }} libopenmpi-dev=${{ matrix.mpi }}

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: nvidia,conda-forge,defaults
          auto-update-conda: true
          python-version: ${{ matrix.python_version }}
          activate-environment: cuda-install

      - name: Install CUDA Toolkit
        shell: bash -l {0}
        run: conda install -y cuda -c nvidia/label/cuda-${{ matrix.cuda }}

      - name: Install NCCL
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt update
          sudo apt install -y libnccl2=${{ matrix.nccl }}-1+cuda${{ matrix.cuda_nccl }} libnccl-dev=${{ matrix.nccl }}-1+cuda${{ matrix.cuda_nccl }}

      - name: Install build dependencies (setuptools, wheel)
        shell: bash -l {0}
        run: |
          pip install --upgrade pip
          pip install setuptools==75.3.0 wheel==0.44.0 ninja==1.11.1.1

      - name: Build wheels
        shell: bash -l {0}
        run: python setup.py bdist_wheel --plat-name=manylinux2014_x86_64

      - uses: actions/upload-artifact@v4
        with:
          name: linux-wheels-${{ matrix.python_version }}
          path: dist/*.whl

  build_macos:
    name: MACOS Build
    needs: [pre-commit]
    runs-on: macos-13
    strategy:
      matrix:
        include:
          - python_version: "3.10"
            cibuildwheel_python: "cp310-*"

          - python_version: "3.11"
            cibuildwheel_python: "cp311-*"

          - python_version: "3.12"
            cibuildwheel_python: "cp312-*"

    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Used to host cibuildwheel
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: build dependencies (setuptools, wheel)
        run: python3 -m pip install cibuildwheel==2.23.2

      - name: Build wheels
        run: |
          python3 -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibuildwheel_python }}
          CIBW_ARCHS_MACOS: universal2
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v4
        with:
          name: macos-wheels-${{ matrix.python_version }}
          path: ./wheelhouse/*.whl

  build_windows:
    name: Windows Build (CPU Only)
    needs: [pre-commit]
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - python_version: "3.10"
            cibw_build: "cp310-win_amd64"
          - python_version: "3.11"
            cibw_build: "cp311-win_amd64"
          - python_version: "3.12"
            cibw_build: "cp312-win_amd64"
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install cibuildwheel and NumPy <2.0
        run: |
          python -m pip install cibuildwheel==2.21.3
          python -m pip install "numpy<2.0"

      - name: Build wheels (CPU Only)
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS_WINDOWS: auto64
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ENVIRONMENT: "FORCE_CPU_ONLY=1 CMAKE_ARGS='-DBUILD_TESTING=OFF'"

      - uses: actions/upload-artifact@v4
        with:
          name: windows-wheels-cpu-${{ matrix.python_version }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: SDist Build
    needs: [pre-commit]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]
        python_version: ["3.10"]
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Build SDist
        run: |
          python -m pip install setuptools wheel twine
          python setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist-${{ matrix.python_version }}
          path: dist/*.tar.gz

  pre-commit:
    name: Run pre-commit
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pip install clang-format

      - name: Cache pre-commit environments
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: pre-commit run --all-files

  test:
    name: Test
    needs: [build_linux, build_macos, build_windows, build_sdist]
    runs-on: ubuntu-22.04

    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install MPI
        run: |
          sudo apt update
          sudo apt install -y openmpi-bin=4.1.2-2ubuntu1 libopenmpi-dev=4.1.2-2ubuntu1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2.0.2
        with:
          cmake-version: "3.22.x"

      - name: cmake version
        run: cmake --version

      - name: Build binary
        run: |
          sh scripts/compile.sh Release

      - name: Run CPP Test Unit
        run: build/run_tests --cpu

      - name : Run Python Test Unit
        run: python -m test.py_unit.main --cpu


  upload_pypi:
    name: Upload to PyPI
    needs: [test]
    runs-on: ubuntu-22.04
    environment:
      name: testpypi
      url: https://pypi.org/project/pytagi
    permissions:
      contents: read       # to fetch artifacts
      id-token: write      # mandatory for Trusted Publishing
      packages: write      # to publish packages
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Unzip build artifacts into dist
        run: |
          mkdir dist
          find ./artifacts -type f -name "*.whl" -exec cp {} dist/ \;
          cp ./artifacts/sdist-3.10/*.tar.gz dist/
          rm -rf build *.egg-info  # Clean any stale metadata


      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          verbose: true
