name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_linux:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        cuda: ["11.3"]
        python_version: ["3.9", "3.10", "3.11"]
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: "3.23.x"

      - name: Use cmake
        run: cmake --version

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: ./extern/action_scripts/install_cuda_ubuntu.sh
        shell: bash

      - name: Install dependencies
        run: pip install wheel

      - name: Build wheels
        run: python setup.py bdist_wheel --plat-name=manylinux2014_x86_64

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl

  build_macos:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.python_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-11
            python_version: "3.9"
            cibuildwheel_python: "cp39-*"

          - os: macos-11
            python_version: "3.10"
            cibuildwheel_python: "cp310-*"

          - os: macos-11
            python_version: "3.11"
            cibuildwheel_python: "cp311-*"
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      # Used to host cibuildwheel
      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install cibuildwheel
        run: python3 -m pip install cibuildwheel==2.11.2

      - name: Build wheels
        run: python3 -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibuildwheel_python }}
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build SDist
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python_version: ["3.9", "3.10", "3.11"]
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Build SDist
        run: |
          python -m pip install setuptools wheel twine
          python setup.py sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  test:
    needs: [build_linux, build_macos, build_sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        cuda: ["11.3"]
    if: ${{ github.event.pull_request.draft == false }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
        run: ./extern/action_scripts/install_cuda_ubuntu.sh
        shell: bash

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: "3.23.x"

      - name: cmake version
        run: cmake --version

      - name: Configure build
        run: |
          cmake . -B build

      - name: Build binary
        run: |
          cmake --build build --config RelWithDebInfo -j 16

      - name: Run tests
        run: |
          sh bin/run_test.sh

  upload_pypi:
    needs: [test]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: |
      github.ref_type == 'tag' && 
      github.event_name == 'release' && 
      github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          # repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          verbose: true
