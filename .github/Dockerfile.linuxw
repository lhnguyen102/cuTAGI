# Use Ubuntu 22.04 as base image
FROM ubuntu:22.04

# Set Python version as build argument. NOTE: python 3.12 is not supported on ubuntu 22.04. though deadsnakes ppa
ARG PYTHON_VERSION=3.11
ENV PYTHON_VERSION=${PYTHON_VERSION}

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
    build-essential \
    autoconf automake libtool pkg-config \
    apt-transport-https ca-certificates \
    software-properties-common g++ git wget \
    cmake gdb valgrind \
    openmpi-bin=4.1.2-2ubuntu1 \
    libopenmpi-dev=4.1.2-2ubuntu1 \
    curl \
    file \
    gzip \
    gcc-12 \
    g++-12 \
    gnupg \
    locales locales-all && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends \
    python${PYTHON_VERSION} \
    python${PYTHON_VERSION}-dev \
    python${PYTHON_VERSION}-venv \
    python${PYTHON_VERSION}-distutils && \
    ln -sf /usr/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
    ln -sf /usr/bin/python${PYTHON_VERSION} /usr/bin/python && \
    rm -rf /var/lib/apt/lists/*


# Set default gcc/g++ version and Python version
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12

# Install CUDA keyring and NCCL
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    apt-get update && \
    apt-get install -y libnccl2=2.25.1-1+cuda12.2 libnccl-dev=2.25.1-1+cuda12.2 && \
    rm -rf /var/lib/apt/lists/*

# Install Miniconda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
    bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh

# Add conda to path
ENV PATH /opt/conda/bin:$PATH

# Configure conda channels and install Python with the specified version
RUN conda config --add channels nvidia && \
    conda config --add channels conda-forge && \
    conda config --add channels defaults && \
    conda install -y python=${PYTHON_VERSION}

# Install CUDA toolkit
RUN conda install -y cuda -c nvidia/label/cuda-12.2.2

# Install build dependencies
RUN pip install --upgrade pip && \
    pip install setuptools==75.3.0 wheel==0.44.0 ninja==1.11.1.1

# Set working directory
WORKDIR /workspace

# Create a non-root user
RUN useradd -m -s /bin/bash builder && \
    chown -R builder:builder /workspace

# Copy only necessary files, excluding data folders
COPY --chown=builder:builder . /workspace/

# Switch to non-root user
USER builder

# Set environment variables for compilation
ENV CC=gcc-12
ENV CXX=g++-12
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH

# Command to run when container starts
CMD ["/bin/bash"]
